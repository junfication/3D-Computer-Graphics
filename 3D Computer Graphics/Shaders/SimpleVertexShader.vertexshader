#version 410 core

uniform mat4  vertexTransform;
uniform vec3  cameraPosition;
uniform mat4  worldTransform;
uniform sampler2D diffuse;
uniform sampler2D specular;

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 modelPosition;
layout(location = 1) in vec3 vertexColor;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec2 uvPosition;

// Interpolating vertex attributes over the rasterizer
out VS_OUTPUT
{
    vec3 rasterColor;
    vec2 uvPosition;
    vec4 vertexPosition;
    vec4 vertexNormal;
} vs_out;

void main()
{
    vs_out.rasterColor = vertexNormal;// * dot(lightDirection, vertexNormal);
    vs_out.uvPosition = uvPosition;
    vs_out.vertexPosition = worldTransform * vec4( modelPosition, 1.0f );
    vs_out.vertexNormal = normalize(worldTransform * vec4(vertexNormal, 0.0f));


    gl_Position = vertexTransform *  vec4( modelPosition, 1.0f );
}
