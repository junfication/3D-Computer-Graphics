#version 410 core

#define M_PI   3.14159265358979323846264338327950288

uniform LightArray
{
  // Light Independant
  int  LightActive[8]; // 0 = active, 1 = inactive
  int  LightType[8]; // 0 = Point Light, 1 = Spotlight, 2 = Directional Light
  vec3 LightPosition[8];
  vec3 Ambient[8];
  vec3 Emissive; // should be global only 1 instance not array
  vec3 I_Specular[8];
  vec3 I_Diffuse[8];
  vec3 LightDirection[8];
  vec3 LightAngle[8]; // x = inner angle, y = outer angle, z = spot falloff
  vec3 K_Ambient; // should be global only 1 instance not array, material ambient
  // Global Values
  vec3 Attenuation; // x = C1, y = C2, z = C3
  vec3 FogColor;
  vec3 GlobalAmbient;
  vec3 NearFar; // x = near, y = far
  vec3 ViewVec;
} LA;

uniform mat4  vertexTransform;
uniform vec3  cameraPosition;
uniform mat4  worldTransform;
uniform sampler2D diffuse;
uniform sampler2D specular;

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 modelPosition;
layout(location = 1) in vec3 vertexColor;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec2 uvPosition;

// Interpolating vertex attributes over the rasterizer
out VS_OUTPUT
{
    vec3 rasterColor;
    vec2 uvPosition;
} vs_out;

void main()
{
    gl_Position = vertexTransform * vec4( modelPosition, 1.0f );

    vec4 vertexPosition = worldTransform * vec4( modelPosition, 1.0f );
    vec4 vertexNormal = worldTransform * vec4(vertexNormal, 0.0f);
    vertexNormal = normalize(vertexNormal);

    vec3 K_Specular = texture(specular, uvPosition).rgb;
    vec3 K_Diffuse  = texture(diffuse, uvPosition).rgb;

    vec3 finalColor = vec3(0.0f);

    for(int i = 0; i < 8; ++i)
    {
      if(LA.LightActive[i] == 1) continue;
      if(LA.LightType[i] < 2)
      {
        // Ambient
        vec3 I_Ambient = LA.Ambient[i] * LA.K_Ambient;

        // Diffuse
        vec4 light = vec4(LA.LightPosition[i], 1.0);
        vec4 L = normalize(light - vertexPosition);
        float N_dot_L = max( dot(vertexNormal, L), 0.0f);
        vec3 I_Dif = LA.I_Diffuse[i] * K_Diffuse * N_dot_L;

        // Specular
        vec3 coeff = LA.I_Specular[i] * K_Specular;
        vec4 reflection = 2 * dot(vertexNormal, L) * vertexNormal;
        reflection = reflection - L;
        float shiny = pow(K_Specular.r, 2) * 255.f;
        vec4 V = normalize(vec4(cameraPosition, 1.f) - vertexPosition);
        float R_dot_V = max(dot(reflection, V), 0.f);
        float R_dot_V_ns = pow(R_dot_V, shiny);
        if(R_dot_V == 0.f) R_dot_V_ns = 0.f;
        vec3 I_spec = coeff * R_dot_V_ns;

        // attenutation
        float c1 = LA.Attenuation.x;
        float c2 = LA.Attenuation.y;
        float c3 = LA.Attenuation.z;
        float dist = length(L);
        float dist_sq = pow(dist, 2);
        float deno = c1 + (c2 * dist) + (c3 * dist_sq);
        float att = min(1.f/deno, 1.0f);

        if(LA.LightType[i] == 1)
        {
          float se = 0.f;
          vec4 spotlight_dir = vec4(normalize(LA.LightDirection[i] - LA.LightPosition[i]), 0.f);
          float alpha = dot(spotlight_dir, -L);
          float theta = cos((LA.LightAngle[i].x / 180.f) * M_PI);
          float phi = cos((LA.LightAngle[i].y / 180.f) * M_PI);
          float top = alpha - phi;
          float btm = theta - phi;
          if(btm != 0.f && LA.LightAngle[i].y > LA.LightAngle[i].x)
          {
            se = top / btm;
            se = pow(se, LA.LightAngle[i].z);
            se = max(se, 0.0f);
          }
          finalColor += (att*(I_Ambient)) + (att * se * (I_spec + I_Dif));
        }
        else 
          finalColor += (att*(I_Ambient)) + (att * (I_spec + I_Dif));
      }
      else
      {
        vec4 V = vec4(normalize(LA.LightPosition[i] - LA.LightDirection[i]), 0.f);
        float N_dot_V = max(dot(vertexNormal, V), 0.f);
        finalColor += N_dot_V * LA.I_Diffuse[i] * K_Diffuse;
      }
    }
    float viewlength = length(LA.ViewVec);
    float s_top = LA.NearFar.y - viewlength;
    float s_btm = LA.NearFar.y - LA.NearFar.x;
    float S = s_top / s_btm;
    finalColor += (LA.Emissive + (LA.GlobalAmbient * LA.K_Ambient));
    vec3 raster = S * finalColor + (1-S) * LA.FogColor;
    vs_out.rasterColor = raster;
}
